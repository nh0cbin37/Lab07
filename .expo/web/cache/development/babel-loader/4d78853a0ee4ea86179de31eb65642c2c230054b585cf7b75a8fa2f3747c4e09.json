{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\nvar _common = require(\"@react-native-firebase/app/lib/common\");\nvar _FirestoreDocumentReference = _interopRequireDefault(require(\"./FirestoreDocumentReference\"));\nvar _utils = require(\"./utils\");\nvar _serialize = require(\"./utils/serialize\");\nvar FirestoreWriteBatch = exports.default = function () {\n  function FirestoreWriteBatch(firestore) {\n    (0, _classCallCheck2.default)(this, FirestoreWriteBatch);\n    this._firestore = firestore;\n    this._writes = [];\n    this._committed = false;\n  }\n  (0, _createClass2.default)(FirestoreWriteBatch, [{\n    key: \"_verifyNotCommitted\",\n    value: function _verifyNotCommitted(method) {\n      if (this._committed) {\n        throw new Error(`firebase.firestore.batch().${method}(*) A write batch can no longer be used after commit() has been called.`);\n      }\n    }\n  }, {\n    key: \"commit\",\n    value: function commit() {\n      this._verifyNotCommitted('commit');\n      this._committed = true;\n      if (this._writes.length === 0) {\n        return Promise.resolve();\n      }\n      return this._firestore.native.documentBatch(this._writes);\n    }\n  }, {\n    key: \"delete\",\n    value: function _delete(documentRef) {\n      this._verifyNotCommitted('delete');\n      if (!(documentRef instanceof _FirestoreDocumentReference.default)) {\n        throw new Error(\"firebase.firestore.batch().delete(*) 'documentRef' expected instance of a DocumentReference.\");\n      }\n      if (documentRef.firestore.app !== this._firestore.app) {\n        throw new Error(\"firebase.firestore.batch().delete(*) 'documentRef' provided DocumentReference is from a different Firestore instance.\");\n      }\n      this._writes.push({\n        path: documentRef.path,\n        type: 'DELETE'\n      });\n      return this;\n    }\n  }, {\n    key: \"set\",\n    value: function set(documentRef, data, options) {\n      this._verifyNotCommitted('set');\n      if (!(documentRef instanceof _FirestoreDocumentReference.default)) {\n        throw new Error(\"firebase.firestore.batch().set(*) 'documentRef' expected instance of a DocumentReference.\");\n      }\n      if (documentRef.firestore.app !== this._firestore.app) {\n        throw new Error(\"firebase.firestore.batch().set(*) 'documentRef' provided DocumentReference is from a different Firestore instance.\");\n      }\n      if (!(0, _common.isObject)(data)) {\n        throw new Error(\"firebase.firestore.batch().set(_, *) 'data' must be an object.\");\n      }\n      var setOptions;\n      try {\n        setOptions = (0, _utils.parseSetOptions)(options);\n      } catch (e) {\n        throw new Error(`firebase.firestore().doc().set(_, *) ${e.message}.`);\n      }\n      this._writes.push({\n        path: documentRef.path,\n        type: 'SET',\n        data: (0, _serialize.buildNativeMap)(data, this._firestore._settings.ignoreUndefinedProperties),\n        options: setOptions\n      });\n      return this;\n    }\n  }, {\n    key: \"update\",\n    value: function update(documentRef) {\n      this._verifyNotCommitted('update');\n      if (!(documentRef instanceof _FirestoreDocumentReference.default)) {\n        throw new Error(\"firebase.firestore.batch().update(*) 'documentRef' expected instance of a DocumentReference.\");\n      }\n      if (documentRef.firestore.app !== this._firestore.app) {\n        throw new Error(\"firebase.firestore.batch().update(*) 'documentRef' provided DocumentReference is from a different Firestore instance.\");\n      }\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n      if (args.length === 0) {\n        throw new Error('firebase.firestore.batch().update(_, *) Invalid arguments. Expected update object or list of key/value pairs.');\n      }\n      var data;\n      try {\n        data = (0, _utils.parseUpdateArgs)(args);\n      } catch (e) {\n        throw new Error(`firebase.firestore().batch().update(_, *) ${e.message}`);\n      }\n      this._writes.push({\n        path: documentRef.path,\n        type: 'UPDATE',\n        data: (0, _serialize.buildNativeMap)(data, this._firestore._settings.ignoreUndefinedProperties)\n      });\n      return this;\n    }\n  }]);\n  return FirestoreWriteBatch;\n}();","map":{"version":3,"names":["_common","require","_FirestoreDocumentReference","_interopRequireDefault","_utils","_serialize","FirestoreWriteBatch","exports","default","firestore","_classCallCheck2","_firestore","_writes","_committed","_createClass2","key","value","_verifyNotCommitted","method","Error","commit","length","Promise","resolve","native","documentBatch","_delete","documentRef","FirestoreDocumentReference","app","push","path","type","set","data","options","isObject","setOptions","parseSetOptions","e","message","buildNativeMap","_settings","ignoreUndefinedProperties","update","_len","arguments","args","Array","_key","parseUpdateArgs"],"sources":["C:/ReactNative/DemoFireBase/node_modules/@react-native-firebase/firestore/lib/FirestoreWriteBatch.js"],"sourcesContent":["/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport { isObject } from '@react-native-firebase/app/lib/common';\nimport FirestoreDocumentReference from './FirestoreDocumentReference';\nimport { parseSetOptions, parseUpdateArgs } from './utils';\nimport { buildNativeMap } from './utils/serialize';\n\nexport default class FirestoreWriteBatch {\n  constructor(firestore) {\n    this._firestore = firestore;\n    this._writes = [];\n    this._committed = false;\n  }\n\n  _verifyNotCommitted(method) {\n    if (this._committed) {\n      throw new Error(\n        `firebase.firestore.batch().${method}(*) A write batch can no longer be used after commit() has been called.`,\n      );\n    }\n  }\n\n  commit() {\n    this._verifyNotCommitted('commit');\n    this._committed = true;\n    if (this._writes.length === 0) {\n      return Promise.resolve();\n    }\n    return this._firestore.native.documentBatch(this._writes);\n  }\n\n  delete(documentRef) {\n    this._verifyNotCommitted('delete');\n    if (!(documentRef instanceof FirestoreDocumentReference)) {\n      throw new Error(\n        \"firebase.firestore.batch().delete(*) 'documentRef' expected instance of a DocumentReference.\",\n      );\n    }\n\n    if (documentRef.firestore.app !== this._firestore.app) {\n      throw new Error(\n        \"firebase.firestore.batch().delete(*) 'documentRef' provided DocumentReference is from a different Firestore instance.\",\n      );\n    }\n\n    this._writes.push({\n      path: documentRef.path,\n      type: 'DELETE',\n    });\n\n    return this;\n  }\n\n  set(documentRef, data, options) {\n    this._verifyNotCommitted('set');\n    if (!(documentRef instanceof FirestoreDocumentReference)) {\n      throw new Error(\n        \"firebase.firestore.batch().set(*) 'documentRef' expected instance of a DocumentReference.\",\n      );\n    }\n\n    if (documentRef.firestore.app !== this._firestore.app) {\n      throw new Error(\n        \"firebase.firestore.batch().set(*) 'documentRef' provided DocumentReference is from a different Firestore instance.\",\n      );\n    }\n\n    if (!isObject(data)) {\n      throw new Error(\"firebase.firestore.batch().set(_, *) 'data' must be an object.\");\n    }\n\n    let setOptions;\n    try {\n      setOptions = parseSetOptions(options);\n    } catch (e) {\n      throw new Error(`firebase.firestore().doc().set(_, *) ${e.message}.`);\n    }\n\n    this._writes.push({\n      path: documentRef.path,\n      type: 'SET',\n      data: buildNativeMap(data, this._firestore._settings.ignoreUndefinedProperties),\n      options: setOptions,\n    });\n\n    return this;\n  }\n\n  update(documentRef, ...args) {\n    this._verifyNotCommitted('update');\n    if (!(documentRef instanceof FirestoreDocumentReference)) {\n      throw new Error(\n        \"firebase.firestore.batch().update(*) 'documentRef' expected instance of a DocumentReference.\",\n      );\n    }\n\n    if (documentRef.firestore.app !== this._firestore.app) {\n      throw new Error(\n        \"firebase.firestore.batch().update(*) 'documentRef' provided DocumentReference is from a different Firestore instance.\",\n      );\n    }\n\n    if (args.length === 0) {\n      throw new Error(\n        'firebase.firestore.batch().update(_, *) Invalid arguments. Expected update object or list of key/value pairs.',\n      );\n    }\n\n    let data;\n    try {\n      data = parseUpdateArgs(args);\n    } catch (e) {\n      throw new Error(`firebase.firestore().batch().update(_, *) ${e.message}`);\n    }\n\n    this._writes.push({\n      path: documentRef.path,\n      type: 'UPDATE',\n      data: buildNativeMap(data, this._firestore._settings.ignoreUndefinedProperties),\n    });\n\n    return this;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}