{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\nvar _NativeFirebaseError = _interopRequireDefault(require(\"@react-native-firebase/app/lib/internal/NativeFirebaseError\"));\nvar _FirestoreTransaction = _interopRequireDefault(require(\"./FirestoreTransaction\"));\nvar transactionId = 0;\nvar generateTransactionId = function generateTransactionId() {\n  return transactionId++;\n};\nvar FirestoreTransactionHandler = exports.default = function () {\n  function FirestoreTransactionHandler(firestore) {\n    (0, _classCallCheck2.default)(this, FirestoreTransactionHandler);\n    this._firestore = firestore;\n    this._pending = {};\n    this._firestore.emitter.addListener(this._firestore.eventNameForApp('firestore_transaction_event'), this._onTransactionEvent.bind(this));\n  }\n  (0, _createClass2.default)(FirestoreTransactionHandler, [{\n    key: \"_onTransactionEvent\",\n    value: function _onTransactionEvent(event) {\n      switch (event.body.type) {\n        case 'update':\n          this._handleUpdate(event);\n          break;\n        case 'error':\n          this._handleError(event);\n          break;\n        case 'complete':\n          this._handleComplete(event);\n          break;\n      }\n    }\n  }, {\n    key: \"_handleUpdate\",\n    value: function () {\n      var _handleUpdate2 = (0, _asyncToGenerator2.default)(function* (event) {\n        var id = event.listenerId;\n        if (!this._pending[id]) {\n          return this._remove(id);\n        }\n        var _this$_pending$id = this._pending[id],\n          meta = _this$_pending$id.meta,\n          transaction = _this$_pending$id.transaction;\n        var updateFunction = meta.updateFunction,\n          reject = meta.reject;\n        transaction._prepare();\n        var finalError;\n        var updateFailed;\n        var pendingResult;\n        try {\n          var possiblePromise = updateFunction(transaction);\n          if (!possiblePromise || !possiblePromise.then) {\n            throw new Error(\"firebase.firestore().runTransaction(*) 'updateFunction' must return a Promise.\");\n          }\n          pendingResult = yield possiblePromise;\n        } catch (exception) {\n          updateFailed = true;\n          finalError = exception;\n        }\n        if (updateFailed || finalError) {\n          return reject(finalError);\n        }\n        transaction._pendingResult = pendingResult;\n        return this._firestore.native.transactionApplyBuffer(id, transaction._commandBuffer);\n      });\n      function _handleUpdate(_x) {\n        return _handleUpdate2.apply(this, arguments);\n      }\n      return _handleUpdate;\n    }()\n  }, {\n    key: \"_handleError\",\n    value: function _handleError(event) {\n      var id = event.listenerId,\n        body = event.body;\n      var error = body.error;\n      if (!this._pending[id]) {\n        return;\n      }\n      var meta = this._pending[id].meta;\n      if (meta && error) {\n        var errorAndStack = _NativeFirebaseError.default.fromEvent(error, 'firestore', meta.stack);\n        meta.reject(errorAndStack);\n      }\n    }\n  }, {\n    key: \"_handleComplete\",\n    value: function _handleComplete(event) {\n      var id = event.listenerId;\n      if (!this._pending[id]) {\n        return;\n      }\n      var _this$_pending$id2 = this._pending[id],\n        meta = _this$_pending$id2.meta,\n        transaction = _this$_pending$id2.transaction;\n      if (meta) {\n        meta.resolve(transaction._pendingResult);\n      }\n    }\n  }, {\n    key: \"_add\",\n    value: function _add(updateFunction) {\n      var _this = this;\n      var id = generateTransactionId();\n      var meta = {\n        id: id,\n        updateFunction: updateFunction,\n        stack: new Error().stack.split('\\n').slice(2).join('\\n')\n      };\n      this._pending[id] = {\n        meta: meta,\n        transaction: new _FirestoreTransaction.default(this._firestore, meta)\n      };\n      return new Promise(function (resolve, reject) {\n        _this._firestore.native.transactionBegin(id);\n        meta.resolve = function (result) {\n          _this._remove(id);\n          resolve(result);\n        };\n        meta.reject = function (error) {\n          _this._remove(id);\n          reject(error);\n        };\n      });\n    }\n  }, {\n    key: \"_remove\",\n    value: function _remove(id) {\n      this._firestore.native.transactionDispose(id);\n      delete this._pending[id];\n    }\n  }]);\n  return FirestoreTransactionHandler;\n}();","map":{"version":3,"names":["_NativeFirebaseError","_interopRequireDefault","require","_FirestoreTransaction","transactionId","generateTransactionId","FirestoreTransactionHandler","exports","default","firestore","_classCallCheck2","_firestore","_pending","emitter","addListener","eventNameForApp","_onTransactionEvent","bind","_createClass2","key","value","event","body","type","_handleUpdate","_handleError","_handleComplete","_handleUpdate2","_asyncToGenerator2","id","listenerId","_remove","_this$_pending$id","meta","transaction","updateFunction","reject","_prepare","finalError","updateFailed","pendingResult","possiblePromise","then","Error","exception","_pendingResult","native","transactionApplyBuffer","_commandBuffer","_x","apply","arguments","error","errorAndStack","NativeError","fromEvent","stack","_this$_pending$id2","resolve","_add","_this","split","slice","join","FirestoreTransaction","Promise","transactionBegin","result","transactionDispose"],"sources":["C:/ReactNative/DemoFireBase/node_modules/@react-native-firebase/firestore/lib/FirestoreTransactionHandler.js"],"sourcesContent":["/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport NativeError from '@react-native-firebase/app/lib/internal/NativeFirebaseError';\nimport FirestoreTransaction from './FirestoreTransaction';\n\nlet transactionId = 0;\n\n/**\n * Uses the push id generator to create a transaction id\n * @returns {number}\n * @private\n */\nconst generateTransactionId = () => transactionId++;\n\nexport default class FirestoreTransactionHandler {\n  constructor(firestore) {\n    this._firestore = firestore;\n    this._pending = {};\n    this._firestore.emitter.addListener(\n      this._firestore.eventNameForApp('firestore_transaction_event'),\n      this._onTransactionEvent.bind(this),\n    );\n  }\n\n  _onTransactionEvent(event) {\n    switch (event.body.type) {\n      case 'update':\n        this._handleUpdate(event);\n        break;\n      case 'error':\n        this._handleError(event);\n        break;\n      case 'complete':\n        this._handleComplete(event);\n        break;\n    }\n  }\n\n  async _handleUpdate(event) {\n    const { listenerId: id } = event;\n\n    // abort if no longer exists js side\n    if (!this._pending[id]) {\n      return this._remove(id);\n    }\n\n    const { meta, transaction } = this._pending[id];\n    const { updateFunction, reject } = meta;\n\n    // clear any saved state from previous transaction runs\n    transaction._prepare();\n\n    let finalError;\n    let updateFailed;\n    let pendingResult;\n\n    try {\n      const possiblePromise = updateFunction(transaction);\n\n      // validate user has returned a promise in their update function\n      if (!possiblePromise || !possiblePromise.then) {\n        throw new Error(\n          \"firebase.firestore().runTransaction(*) 'updateFunction' must return a Promise.\",\n        );\n      }\n\n      pendingResult = await possiblePromise;\n    } catch (exception) {\n      // exception can still be falsey if user `Promise.reject();` 's with no args\n      // so we track the exception with a updateFailed boolean to ensure no fall-through\n      updateFailed = true;\n      finalError = exception;\n    }\n\n    // reject the final promise and remove from native\n    // update is failed when either the users updateFunction\n    // throws an error or rejects a promise\n    if (updateFailed || finalError) {\n      return reject(finalError);\n    }\n\n    // capture the resolved result as we'll need this\n    // to resolve the runTransaction() promise when\n    // native emits that the transaction is final\n    transaction._pendingResult = pendingResult;\n\n    // send the buffered update/set/delete commands for native to process\n    return this._firestore.native.transactionApplyBuffer(id, transaction._commandBuffer);\n  }\n\n  /**\n   * Reject the promise with a native error event\n   *\n   * @param event\n   * @private\n   */\n  _handleError(event) {\n    const { listenerId: id, body } = event;\n    const { error } = body;\n\n    if (!this._pending[id]) {\n      return;\n    }\n\n    const { meta } = this._pending[id];\n\n    if (meta && error) {\n      const errorAndStack = NativeError.fromEvent(error, 'firestore', meta.stack);\n      meta.reject(errorAndStack);\n    }\n  }\n\n  /**\n   * Once the transaction has completed on native, resolve the promise with any\n   * pending results\n   *\n   * @param event\n   * @private\n   */\n  _handleComplete(event) {\n    const { listenerId: id } = event;\n\n    if (!this._pending[id]) {\n      return;\n    }\n\n    const { meta, transaction } = this._pending[id];\n    if (meta) {\n      meta.resolve(transaction._pendingResult);\n    }\n  }\n\n  /**\n   * Internally adds a transaction execution function to the queue\n   *\n   * @param updateFunction\n   * @returns {Promise<any>}\n   * @private\n   */\n  _add(updateFunction) {\n    const id = generateTransactionId();\n\n    const meta = {\n      id,\n      updateFunction,\n      stack: new Error().stack.split('\\n').slice(2).join('\\n'),\n    };\n\n    this._pending[id] = {\n      meta,\n      transaction: new FirestoreTransaction(this._firestore, meta),\n    };\n\n    return new Promise((resolve, reject) => {\n      this._firestore.native.transactionBegin(id);\n\n      meta.resolve = result => {\n        this._remove(id);\n        resolve(result);\n      };\n\n      meta.reject = error => {\n        this._remove(id);\n        reject(error);\n      };\n    });\n  }\n\n  /**\n   * Internally removes the transaction once it has resolved\n   * or rejected\n   *\n   * @param id\n   * @private\n   */\n  _remove(id) {\n    this._firestore.native.transactionDispose(id);\n    delete this._pending[id];\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}