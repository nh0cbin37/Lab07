{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _reactNative = require(\"react-native\");\nvar _TouchableRipple = _interopRequireDefault(require(\"../TouchableRipple/TouchableRipple\"));\nvar _Text = _interopRequireDefault(require(\"../Typography/Text\"));\nvar _excluded = [\"children\", \"textStyle\", \"style\", \"numeric\", \"maxFontSizeMultiplier\", \"testID\"];\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nvar DataTableCell = function DataTableCell(_ref) {\n  var children = _ref.children,\n    textStyle = _ref.textStyle,\n    style = _ref.style,\n    numeric = _ref.numeric,\n    maxFontSizeMultiplier = _ref.maxFontSizeMultiplier,\n    testID = _ref.testID,\n    rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);\n  return React.createElement(_TouchableRipple.default, _extends({}, rest, {\n    testID: testID,\n    style: [styles.container, numeric && styles.right, style]\n  }), React.createElement(CellContent, {\n    textStyle: textStyle,\n    testID: testID,\n    maxFontSizeMultiplier: maxFontSizeMultiplier\n  }, children));\n};\nvar CellContent = function CellContent(_ref2) {\n  var children = _ref2.children,\n    textStyle = _ref2.textStyle,\n    maxFontSizeMultiplier = _ref2.maxFontSizeMultiplier,\n    testID = _ref2.testID;\n  if (React.isValidElement(children)) {\n    return children;\n  }\n  return React.createElement(_Text.default, {\n    style: textStyle,\n    numberOfLines: 1,\n    maxFontSizeMultiplier: maxFontSizeMultiplier,\n    testID: `${testID}-text-container`\n  }, children);\n};\nDataTableCell.displayName = 'DataTable.Cell';\nvar styles = _reactNative.StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'row',\n    alignItems: 'center'\n  },\n  right: {\n    justifyContent: 'flex-end'\n  }\n});\nvar _default = exports.default = DataTableCell;","map":{"version":3,"names":["React","_interopRequireWildcard","require","_reactNative","_TouchableRipple","_interopRequireDefault","_Text","_excluded","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","obj","__esModule","default","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","DataTableCell","_ref","children","textStyle","style","numeric","maxFontSizeMultiplier","testID","rest","_objectWithoutProperties2","createElement","TouchableRipple","_extends","styles","container","right","CellContent","_ref2","isValidElement","Text","numberOfLines","displayName","StyleSheet","create","flex","flexDirection","alignItems","justifyContent","_default","exports"],"sources":["C:\\ReactNative\\DemoFireBase\\node_modules\\react-native-paper\\src\\components\\DataTable\\DataTableCell.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  StyleSheet,\n  StyleProp,\n  ViewStyle,\n  TextStyle,\n  GestureResponderEvent,\n} from 'react-native';\n\nimport type { $RemoveChildren } from '../../types';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport Text from '../Typography/Text';\n\nexport type Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Content of the `DataTableCell`.\n   */\n  children: React.ReactNode;\n  /**\n   * Align the text to the right. Generally monetary or number fields are aligned to right.\n   */\n  numeric?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: (e: GestureResponderEvent) => void;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Text content style of the `DataTableCell`.\n   */\n  textStyle?: StyleProp<TextStyle>;\n  /**\n   * Specifies the largest possible scale a text font can reach.\n   */\n  maxFontSizeMultiplier?: number;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n};\n\n/**\n * A component to show a single cell inside of a table.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { DataTable } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *      <DataTable.Row>\n *        <DataTable.Cell numeric>1</DataTable.Cell>\n *        <DataTable.Cell numeric>2</DataTable.Cell>\n *        <DataTable.Cell numeric>3</DataTable.Cell>\n *        <DataTable.Cell numeric>4</DataTable.Cell>\n *      </DataTable.Row>\n * );\n *\n * export default MyComponent;\n * ```\n *\n * If you want to support multiline text, please use View instead, as multiline text doesn't comply with\n * MD Guidelines (https://github.com/callstack/react-native-paper/issues/2381).\n *\n * @extends TouchableRipple props https://callstack.github.io/react-native-paper/docs/components/TouchableRipple\n */\nconst DataTableCell = ({\n  children,\n  textStyle,\n  style,\n  numeric,\n  maxFontSizeMultiplier,\n  testID,\n  ...rest\n}: Props) => {\n  return (\n    <TouchableRipple\n      {...rest}\n      testID={testID}\n      style={[styles.container, numeric && styles.right, style]}\n    >\n      <CellContent\n        textStyle={textStyle}\n        testID={testID}\n        maxFontSizeMultiplier={maxFontSizeMultiplier}\n      >\n        {children}\n      </CellContent>\n    </TouchableRipple>\n  );\n};\n\nconst CellContent = ({\n  children,\n  textStyle,\n  maxFontSizeMultiplier,\n  testID,\n}: Pick<\n  Props,\n  'children' | 'textStyle' | 'testID' | 'maxFontSizeMultiplier'\n>) => {\n  if (React.isValidElement(children)) {\n    return children;\n  }\n\n  return (\n    <Text\n      style={textStyle}\n      numberOfLines={1}\n      maxFontSizeMultiplier={maxFontSizeMultiplier}\n      testID={`${testID}-text-container`}\n    >\n      {children}\n    </Text>\n  );\n};\n\nDataTableCell.displayName = 'DataTable.Cell';\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n\n  right: {\n    justifyContent: 'flex-end',\n  },\n});\n\nexport default DataTableCell;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}