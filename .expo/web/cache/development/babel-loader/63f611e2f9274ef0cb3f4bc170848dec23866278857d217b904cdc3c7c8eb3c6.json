{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\nvar _common = require(\"@react-native-firebase/app/lib/common\");\nvar Settings = exports.default = function () {\n  function Settings(auth) {\n    (0, _classCallCheck2.default)(this, Settings);\n    this._auth = auth;\n    this._forceRecaptchaFlowForTesting = false;\n    this._appVerificationDisabledForTesting = false;\n  }\n  (0, _createClass2.default)(Settings, [{\n    key: \"forceRecaptchaFlowForTesting\",\n    get: function get() {\n      return this._forceRecaptchaFlowForTesting;\n    },\n    set: function set(forceRecaptchaFlow) {\n      if (_common.isAndroid) {\n        this._forceRecaptchaFlowForTesting = forceRecaptchaFlow;\n        this._auth.native.forceRecaptchaFlowForTesting(forceRecaptchaFlow);\n      }\n    }\n  }, {\n    key: \"appVerificationDisabledForTesting\",\n    get: function get() {\n      return this._appVerificationDisabledForTesting;\n    },\n    set: function set(disabled) {\n      this._appVerificationDisabledForTesting = disabled;\n      this._auth.native.setAppVerificationDisabledForTesting(disabled);\n    }\n  }, {\n    key: \"setAutoRetrievedSmsCodeForPhoneNumber\",\n    value: function setAutoRetrievedSmsCodeForPhoneNumber(phoneNumber, smsCode) {\n      if (_common.isAndroid) {\n        return this._auth.native.setAutoRetrievedSmsCodeForPhoneNumber(phoneNumber, smsCode);\n      }\n      return Promise.resolve(null);\n    }\n  }]);\n  return Settings;\n}();","map":{"version":3,"names":["_common","require","Settings","exports","default","auth","_classCallCheck2","_auth","_forceRecaptchaFlowForTesting","_appVerificationDisabledForTesting","_createClass2","key","get","set","forceRecaptchaFlow","isAndroid","native","forceRecaptchaFlowForTesting","disabled","setAppVerificationDisabledForTesting","value","setAutoRetrievedSmsCodeForPhoneNumber","phoneNumber","smsCode","Promise","resolve"],"sources":["C:/ReactNative/DemoFireBase/node_modules/@react-native-firebase/auth/lib/Settings.js"],"sourcesContent":["/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport { isAndroid } from '@react-native-firebase/app/lib/common';\n\nexport default class Settings {\n  constructor(auth) {\n    this._auth = auth;\n    this._forceRecaptchaFlowForTesting = false;\n    this._appVerificationDisabledForTesting = false;\n  }\n\n  get forceRecaptchaFlowForTesting() {\n    return this._forceRecaptchaFlowForTesting;\n  }\n\n  set forceRecaptchaFlowForTesting(forceRecaptchaFlow) {\n    if (isAndroid) {\n      this._forceRecaptchaFlowForTesting = forceRecaptchaFlow;\n      this._auth.native.forceRecaptchaFlowForTesting(forceRecaptchaFlow);\n    }\n  }\n\n  get appVerificationDisabledForTesting() {\n    return this._appVerificationDisabledForTesting;\n  }\n\n  set appVerificationDisabledForTesting(disabled) {\n    this._appVerificationDisabledForTesting = disabled;\n    this._auth.native.setAppVerificationDisabledForTesting(disabled);\n  }\n\n  setAutoRetrievedSmsCodeForPhoneNumber(phoneNumber, smsCode) {\n    if (isAndroid) {\n      return this._auth.native.setAutoRetrievedSmsCodeForPhoneNumber(phoneNumber, smsCode);\n    }\n\n    return Promise.resolve(null);\n  }\n}\n"],"mappings":";;;;;;;AAiBA,IAAAA,OAAA,GAAAC,OAAA;AAAkE,IAE7CC,QAAQ,GAAAC,OAAA,CAAAC,OAAA;EAC3B,SAAAF,SAAYG,IAAI,EAAE;IAAA,IAAAC,gBAAA,CAAAF,OAAA,QAAAF,QAAA;IAChB,IAAI,CAACK,KAAK,GAAGF,IAAI;IACjB,IAAI,CAACG,6BAA6B,GAAG,KAAK;IAC1C,IAAI,CAACC,kCAAkC,GAAG,KAAK;EACjD;EAAC,IAAAC,aAAA,CAAAN,OAAA,EAAAF,QAAA;IAAAS,GAAA;IAAAC,GAAA,EAED,SAAAA,IAAA,EAAmC;MACjC,OAAO,IAAI,CAACJ,6BAA6B;IAC3C,CAAC;IAAAK,GAAA,EAED,SAAAA,IAAiCC,kBAAkB,EAAE;MACnD,IAAIC,iBAAS,EAAE;QACb,IAAI,CAACP,6BAA6B,GAAGM,kBAAkB;QACvD,IAAI,CAACP,KAAK,CAACS,MAAM,CAACC,4BAA4B,CAACH,kBAAkB,CAAC;MACpE;IACF;EAAC;IAAAH,GAAA;IAAAC,GAAA,EAED,SAAAA,IAAA,EAAwC;MACtC,OAAO,IAAI,CAACH,kCAAkC;IAChD,CAAC;IAAAI,GAAA,EAED,SAAAA,IAAsCK,QAAQ,EAAE;MAC9C,IAAI,CAACT,kCAAkC,GAAGS,QAAQ;MAClD,IAAI,CAACX,KAAK,CAACS,MAAM,CAACG,oCAAoC,CAACD,QAAQ,CAAC;IAClE;EAAC;IAAAP,GAAA;IAAAS,KAAA,EAED,SAAAC,sCAAsCC,WAAW,EAAEC,OAAO,EAAE;MAC1D,IAAIR,iBAAS,EAAE;QACb,OAAO,IAAI,CAACR,KAAK,CAACS,MAAM,CAACK,qCAAqC,CAACC,WAAW,EAAEC,OAAO,CAAC;MACtF;MAEA,OAAOC,OAAO,CAACC,OAAO,CAAC,IAAI,CAAC;IAC9B;EAAC;EAAA,OAAAvB,QAAA;AAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}