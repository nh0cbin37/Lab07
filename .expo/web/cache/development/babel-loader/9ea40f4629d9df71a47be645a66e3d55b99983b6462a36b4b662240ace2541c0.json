{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.DOCUMENT_ID = void 0;\nexports.fromDotSeparatedString = fromDotSeparatedString;\nvar _construct2 = _interopRequireDefault(require(\"@babel/runtime/helpers/construct\"));\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\nvar _common = require(\"@react-native-firebase/app/lib/common\");\nvar RESERVED = new RegExp('[~*/\\\\[\\\\]]');\nvar FirestoreFieldPath = exports.default = function () {\n  function FirestoreFieldPath() {\n    (0, _classCallCheck2.default)(this, FirestoreFieldPath);\n    for (var _len = arguments.length, segments = new Array(_len), _key = 0; _key < _len; _key++) {\n      segments[_key] = arguments[_key];\n    }\n    if (segments.length === 0) {\n      throw new Error('firebase.firestore.FieldPath cannot construct FieldPath with no segments.');\n    }\n    for (var i = 0; i < segments.length; i++) {\n      var segment = segments[i];\n      if (!(0, _common.isString)(segment) || segment === '') {\n        throw new Error(`firebase.firestore.FieldPath invalid segment at index ${i}, expected a non-empty string.`);\n      }\n    }\n    this._segments = segments;\n  }\n  (0, _createClass2.default)(FirestoreFieldPath, [{\n    key: \"isEqual\",\n    value: function isEqual(other) {\n      if (!(other instanceof FirestoreFieldPath)) {\n        throw new Error(\"firebase.firestore.FieldPath.isEqual(*) 'other' expected instance of FieldPath.\");\n      }\n      return this._toPath() === other._toPath();\n    }\n  }, {\n    key: \"_toPath\",\n    value: function _toPath() {\n      return this._segments.join('.');\n    }\n  }, {\n    key: \"_toArray\",\n    value: function _toArray() {\n      return this._segments;\n    }\n  }], [{\n    key: \"documentId\",\n    value: function documentId() {\n      return DOCUMENT_ID;\n    }\n  }]);\n  return FirestoreFieldPath;\n}();\nvar DOCUMENT_ID = exports.DOCUMENT_ID = new FirestoreFieldPath('__name__');\nfunction fromDotSeparatedString(path) {\n  if (path === '' || path.startsWith('.') || path.endsWith('.') || path.indexOf('..') > 0) {\n    throw new Error(\"Invalid field path. Paths must not be empty, begin with '.', end with '.', or contain '..'.\");\n  }\n  var found = path.search(RESERVED);\n  if (found > 0) {\n    throw new Error(`Invalid field path (${path}). Paths must not contain '~', '*', '/', '[', or ']'.`);\n  }\n  return (0, _construct2.default)(FirestoreFieldPath, (0, _toConsumableArray2.default)(path.split('.')));\n}","map":{"version":3,"names":["_common","require","RESERVED","RegExp","FirestoreFieldPath","exports","default","_classCallCheck2","_len","arguments","length","segments","Array","_key","Error","i","segment","isString","_segments","_createClass2","key","value","isEqual","other","_toPath","join","_toArray","documentId","DOCUMENT_ID","fromDotSeparatedString","path","startsWith","endsWith","indexOf","found","search","_construct2","_toConsumableArray2","split"],"sources":["C:/ReactNative/DemoFireBase/node_modules/@react-native-firebase/firestore/lib/FirestoreFieldPath.js"],"sourcesContent":["/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport { isString } from '@react-native-firebase/app/lib/common';\n\nconst RESERVED = new RegExp('[~*/\\\\[\\\\]]');\n\nexport default class FirestoreFieldPath {\n  static documentId() {\n    return DOCUMENT_ID;\n  }\n\n  constructor(...segments) {\n    if (segments.length === 0) {\n      throw new Error('firebase.firestore.FieldPath cannot construct FieldPath with no segments.');\n    }\n\n    for (let i = 0; i < segments.length; i++) {\n      const segment = segments[i];\n      if (!isString(segment) || segment === '') {\n        throw new Error(\n          `firebase.firestore.FieldPath invalid segment at index ${i}, expected a non-empty string.`,\n        );\n      }\n    }\n\n    this._segments = segments;\n  }\n\n  isEqual(other) {\n    if (!(other instanceof FirestoreFieldPath)) {\n      throw new Error(\n        \"firebase.firestore.FieldPath.isEqual(*) 'other' expected instance of FieldPath.\",\n      );\n    }\n\n    return this._toPath() === other._toPath();\n  }\n\n  _toPath() {\n    return this._segments.join('.');\n  }\n\n  _toArray() {\n    return this._segments;\n  }\n}\n\nexport const DOCUMENT_ID = new FirestoreFieldPath('__name__');\n\nexport function fromDotSeparatedString(path) {\n  if (path === '' || path.startsWith('.') || path.endsWith('.') || path.indexOf('..') > 0) {\n    throw new Error(\n      \"Invalid field path. Paths must not be empty, begin with '.', end with '.', or contain '..'.\",\n    );\n  }\n\n  const found = path.search(RESERVED);\n\n  if (found > 0) {\n    throw new Error(\n      `Invalid field path (${path}). Paths must not contain '~', '*', '/', '[', or ']'.`,\n    );\n  }\n\n  return new FirestoreFieldPath(...path.split('.'));\n}\n"],"mappings":";;;;;;;;;;AAiBA,IAAAA,OAAA,GAAAC,OAAA;AAEA,IAAMC,QAAQ,GAAG,IAAIC,MAAM,CAAC,aAAa,CAAC;AAAC,IAEtBC,kBAAkB,GAAAC,OAAA,CAAAC,OAAA;EAKrC,SAAAF,mBAAA,EAAyB;IAAA,IAAAG,gBAAA,CAAAD,OAAA,QAAAF,kBAAA;IAAA,SAAAI,IAAA,GAAAC,SAAA,CAAAC,MAAA,EAAVC,QAAQ,OAAAC,KAAA,CAAAJ,IAAA,GAAAK,IAAA,MAAAA,IAAA,GAAAL,IAAA,EAAAK,IAAA;MAARF,QAAQ,CAAAE,IAAA,IAAAJ,SAAA,CAAAI,IAAA;IAAA;IACrB,IAAIF,QAAQ,CAACD,MAAM,KAAK,CAAC,EAAE;MACzB,MAAM,IAAII,KAAK,CAAC,2EAA2E,CAAC;IAC9F;IAEA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,QAAQ,CAACD,MAAM,EAAEK,CAAC,EAAE,EAAE;MACxC,IAAMC,OAAO,GAAGL,QAAQ,CAACI,CAAC,CAAC;MAC3B,IAAI,CAAC,IAAAE,gBAAQ,EAACD,OAAO,CAAC,IAAIA,OAAO,KAAK,EAAE,EAAE;QACxC,MAAM,IAAIF,KAAK,CACZ,yDAAwDC,CAAE,gCAC7D,CAAC;MACH;IACF;IAEA,IAAI,CAACG,SAAS,GAAGP,QAAQ;EAC3B;EAAC,IAAAQ,aAAA,CAAAb,OAAA,EAAAF,kBAAA;IAAAgB,GAAA;IAAAC,KAAA,EAED,SAAAC,QAAQC,KAAK,EAAE;MACb,IAAI,EAAEA,KAAK,YAAYnB,kBAAkB,CAAC,EAAE;QAC1C,MAAM,IAAIU,KAAK,CACb,iFACF,CAAC;MACH;MAEA,OAAO,IAAI,CAACU,OAAO,CAAC,CAAC,KAAKD,KAAK,CAACC,OAAO,CAAC,CAAC;IAC3C;EAAC;IAAAJ,GAAA;IAAAC,KAAA,EAED,SAAAG,QAAA,EAAU;MACR,OAAO,IAAI,CAACN,SAAS,CAACO,IAAI,CAAC,GAAG,CAAC;IACjC;EAAC;IAAAL,GAAA;IAAAC,KAAA,EAED,SAAAK,SAAA,EAAW;MACT,OAAO,IAAI,CAACR,SAAS;IACvB;EAAC;IAAAE,GAAA;IAAAC,KAAA,EArCD,SAAAM,WAAA,EAAoB;MAClB,OAAOC,WAAW;IACpB;EAAC;EAAA,OAAAxB,kBAAA;AAAA;AAsCI,IAAMwB,WAAW,GAAAvB,OAAA,CAAAuB,WAAA,GAAG,IAAIxB,kBAAkB,CAAC,UAAU,CAAC;AAEtD,SAASyB,sBAAsBA,CAACC,IAAI,EAAE;EAC3C,IAAIA,IAAI,KAAK,EAAE,IAAIA,IAAI,CAACC,UAAU,CAAC,GAAG,CAAC,IAAID,IAAI,CAACE,QAAQ,CAAC,GAAG,CAAC,IAAIF,IAAI,CAACG,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE;IACvF,MAAM,IAAInB,KAAK,CACb,6FACF,CAAC;EACH;EAEA,IAAMoB,KAAK,GAAGJ,IAAI,CAACK,MAAM,CAACjC,QAAQ,CAAC;EAEnC,IAAIgC,KAAK,GAAG,CAAC,EAAE;IACb,MAAM,IAAIpB,KAAK,CACZ,uBAAsBgB,IAAK,uDAC9B,CAAC;EACH;EAEA,WAAAM,WAAA,CAAA9B,OAAA,EAAWF,kBAAkB,MAAAiC,mBAAA,CAAA/B,OAAA,EAAIwB,IAAI,CAACQ,KAAK,CAAC,GAAG,CAAC;AAClD"},"metadata":{},"sourceType":"script","externalDependencies":[]}