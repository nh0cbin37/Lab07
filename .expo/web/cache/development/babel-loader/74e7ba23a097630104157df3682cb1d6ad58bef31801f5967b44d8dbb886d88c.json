{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _reactNative = require(\"react-native\");\nvar _color = _interopRequireDefault(require(\"color\"));\nvar _Pressable = require(\"./Pressable\");\nvar _utils = require(\"./utils\");\nvar _settings = require(\"../../core/settings\");\nvar _theming = require(\"../../core/theming\");\nvar _hasTouchHandler = _interopRequireDefault(require(\"../../utils/hasTouchHandler\"));\nvar _excluded = [\"style\", \"background\", \"borderless\", \"disabled\", \"rippleColor\", \"underlayColor\", \"children\", \"theme\"];\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nvar TouchableRipple = function TouchableRipple(_ref) {\n  var _style2 = _ref.style,\n    _background = _ref.background,\n    _ref$borderless = _ref.borderless,\n    borderless = _ref$borderless === void 0 ? false : _ref$borderless,\n    disabledProp = _ref.disabled,\n    rippleColor = _ref.rippleColor,\n    _underlayColor = _ref.underlayColor,\n    children = _ref.children,\n    themeOverrides = _ref.theme,\n    rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);\n  var theme = (0, _theming.useInternalTheme)(themeOverrides);\n  var _getTouchableRippleCo = (0, _utils.getTouchableRippleColors)({\n      theme: theme,\n      rippleColor: rippleColor\n    }),\n    calculatedRippleColor = _getTouchableRippleCo.calculatedRippleColor;\n  var hoverColor = (0, _color.default)(calculatedRippleColor).fade(0.5).rgb().string();\n  var _React$useContext = React.useContext(_settings.SettingsContext),\n    rippleEffectEnabled = _React$useContext.rippleEffectEnabled;\n  var onPress = rest.onPress,\n    onLongPress = rest.onLongPress,\n    onPressIn = rest.onPressIn,\n    onPressOut = rest.onPressOut;\n  var handlePressIn = React.useCallback(function (e) {\n    onPressIn === null || onPressIn === void 0 ? void 0 : onPressIn(e);\n    if (rippleEffectEnabled) {\n      var _ref2;\n      var centered = rest.centered;\n      var button = e.currentTarget;\n      var _style = window.getComputedStyle(button);\n      var dimensions = button.getBoundingClientRect();\n      var touchX;\n      var touchY;\n      var _e$nativeEvent = e.nativeEvent,\n        changedTouches = _e$nativeEvent.changedTouches,\n        touches = _e$nativeEvent.touches;\n      var touch = (_ref2 = touches === null || touches === void 0 ? void 0 : touches[0]) != null ? _ref2 : changedTouches === null || changedTouches === void 0 ? void 0 : changedTouches[0];\n      if (centered || !touch) {\n        touchX = dimensions.width / 2;\n        touchY = dimensions.height / 2;\n      } else {\n        var _touch$locationX, _touch$locationY;\n        touchX = (_touch$locationX = touch.locationX) != null ? _touch$locationX : e.pageX;\n        touchY = (_touch$locationY = touch.locationY) != null ? _touch$locationY : e.pageY;\n      }\n      var size = centered ? Math.min(dimensions.width, dimensions.height) * 1.25 : Math.max(dimensions.width, dimensions.height) * 2;\n      var container = document.createElement('span');\n      container.setAttribute('data-paper-ripple', '');\n      Object.assign(container.style, {\n        position: 'absolute',\n        pointerEvents: 'none',\n        top: '0',\n        left: '0',\n        right: '0',\n        bottom: '0',\n        borderTopLeftRadius: _style.borderTopLeftRadius,\n        borderTopRightRadius: _style.borderTopRightRadius,\n        borderBottomRightRadius: _style.borderBottomRightRadius,\n        borderBottomLeftRadius: _style.borderBottomLeftRadius,\n        overflow: centered ? 'visible' : 'hidden'\n      });\n      var ripple = document.createElement('span');\n      Object.assign(ripple.style, {\n        position: 'absolute',\n        pointerEvents: 'none',\n        backgroundColor: calculatedRippleColor,\n        borderRadius: '50%',\n        transitionProperty: 'transform opacity',\n        transitionDuration: `${Math.min(size * 1.5, 350)}ms`,\n        transitionTimingFunction: 'linear',\n        transformOrigin: 'center',\n        transform: 'translate3d(-50%, -50%, 0) scale3d(0.1, 0.1, 0.1)',\n        opacity: '0.5',\n        left: `${touchX}px`,\n        top: `${touchY}px`,\n        width: `${size}px`,\n        height: `${size}px`\n      });\n      container.appendChild(ripple);\n      button.appendChild(container);\n      requestAnimationFrame(function () {\n        requestAnimationFrame(function () {\n          Object.assign(ripple.style, {\n            transform: 'translate3d(-50%, -50%, 0) scale3d(1, 1, 1)',\n            opacity: '1'\n          });\n        });\n      });\n    }\n  }, [onPressIn, rest, rippleEffectEnabled, calculatedRippleColor]);\n  var handlePressOut = React.useCallback(function (e) {\n    onPressOut === null || onPressOut === void 0 ? void 0 : onPressOut(e);\n    if (rippleEffectEnabled) {\n      var containers = e.currentTarget.querySelectorAll('[data-paper-ripple]');\n      requestAnimationFrame(function () {\n        requestAnimationFrame(function () {\n          containers.forEach(function (container) {\n            var ripple = container.firstChild;\n            Object.assign(ripple.style, {\n              transitionDuration: '250ms',\n              opacity: 0\n            });\n            setTimeout(function () {\n              var parentNode = container.parentNode;\n              if (parentNode) {\n                parentNode.removeChild(container);\n              }\n            }, 500);\n          });\n        });\n      });\n    }\n  }, [onPressOut, rippleEffectEnabled]);\n  var hasPassedTouchHandler = (0, _hasTouchHandler.default)({\n    onPress: onPress,\n    onLongPress: onLongPress,\n    onPressIn: onPressIn,\n    onPressOut: onPressOut\n  });\n  var disabled = disabledProp || !hasPassedTouchHandler;\n  return React.createElement(_Pressable.Pressable, _extends({}, rest, {\n    onPressIn: handlePressIn,\n    onPressOut: handlePressOut,\n    disabled: disabled,\n    style: function style(state) {\n      return [styles.touchable, borderless && styles.borderless, state.hovered && {\n        backgroundColor: hoverColor\n      }, typeof _style2 === 'function' ? _style2(state) : _style2];\n    }\n  }), function (state) {\n    return React.Children.only(typeof children === 'function' ? children(state) : children);\n  });\n};\nTouchableRipple.supported = true;\nvar styles = _reactNative.StyleSheet.create({\n  touchable: Object.assign({\n    position: 'relative'\n  }, _reactNative.Platform.OS === 'web' && {\n    cursor: 'pointer',\n    transition: '150ms background-color'\n  }),\n  borderless: {\n    overflow: 'hidden'\n  }\n});\nvar _default = exports.default = TouchableRipple;","map":{"version":3,"names":["React","_interopRequireWildcard","require","_reactNative","_color","_interopRequireDefault","_Pressable","_utils","_settings","_theming","_hasTouchHandler","_excluded","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","obj","__esModule","default","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","TouchableRipple","_ref","style","_background","background","_ref$borderless","borderless","disabledProp","disabled","rippleColor","_underlayColor","underlayColor","children","themeOverrides","theme","rest","_objectWithoutProperties2","useInternalTheme","_getTouchableRippleCo","getTouchableRippleColors","calculatedRippleColor","hoverColor","color","fade","rgb","string","_React$useContext","useContext","SettingsContext","rippleEffectEnabled","onPress","onLongPress","onPressIn","onPressOut","handlePressIn","useCallback","e","_ref2","centered","button","currentTarget","window","getComputedStyle","dimensions","getBoundingClientRect","touchX","touchY","_e$nativeEvent","nativeEvent","changedTouches","touches","touch","width","height","_touch$locationX","_touch$locationY","locationX","pageX","locationY","pageY","size","Math","min","max","container","document","createElement","setAttribute","assign","position","pointerEvents","top","left","right","bottom","borderTopLeftRadius","borderTopRightRadius","borderBottomRightRadius","borderBottomLeftRadius","overflow","ripple","backgroundColor","borderRadius","transitionProperty","transitionDuration","transitionTimingFunction","transformOrigin","transform","opacity","appendChild","requestAnimationFrame","handlePressOut","containers","querySelectorAll","forEach","firstChild","setTimeout","parentNode","removeChild","hasPassedTouchHandler","hasTouchHandler","Pressable","_extends","state","styles","touchable","hovered","Children","only","supported","StyleSheet","create","Platform","OS","cursor","transition","_default","exports"],"sources":["C:\\ReactNative\\DemoFireBase\\node_modules\\react-native-paper\\src\\components\\TouchableRipple\\TouchableRipple.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  ColorValue,\n  GestureResponderEvent,\n  Platform,\n  StyleProp,\n  StyleSheet,\n  ViewStyle,\n} from 'react-native';\n\nimport color from 'color';\n\nimport type { PressableProps, PressableStateCallbackType } from './Pressable';\nimport { Pressable } from './Pressable';\nimport { getTouchableRippleColors } from './utils';\nimport { Settings, SettingsContext } from '../../core/settings';\nimport { useInternalTheme } from '../../core/theming';\nimport type { ThemeProp } from '../../types';\nimport hasTouchHandler from '../../utils/hasTouchHandler';\n\nexport type Props = PressableProps & {\n  /**\n   * Whether to render the ripple outside the view bounds.\n   */\n  borderless?: boolean;\n  /**\n   * Type of background drawabale to display the feedback (Android).\n   * https://reactnative.dev/docs/pressable#rippleconfig\n   */\n  background?: Object;\n  /**\n   * Whether to start the ripple at the center (Web).\n   */\n  centered?: boolean;\n  /**\n   * Whether to prevent interaction with the touchable.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press. If not set, will cause the touchable to be disabled.\n   */\n  onPress?: (e: GestureResponderEvent) => void;\n  /**\n   * Function to execute on long press.\n   */\n  onLongPress?: (e: GestureResponderEvent) => void;\n  /**\n   * Function to execute immediately when a touch is engaged, before `onPressOut` and `onPress`.\n   */\n  onPressIn?: (e: GestureResponderEvent) => void;\n  /**\n   * Function to execute when a touch is released.\n   */\n  onPressOut?: (e: GestureResponderEvent) => void;\n  /**\n   * Color of the ripple effect (Android >= 5.0 and Web).\n   */\n  rippleColor?: ColorValue;\n  /**\n   * Color of the underlay for the highlight effect (Android < 5.0 and iOS).\n   */\n  underlayColor?: string;\n  /**\n   * Content of the `TouchableRipple`.\n   */\n  children:\n    | ((state: PressableStateCallbackType) => React.ReactNode)\n    | React.ReactNode;\n  style?:\n    | StyleProp<ViewStyle>\n    | ((state: PressableStateCallbackType) => StyleProp<ViewStyle>)\n    | undefined;\n  /**\n   * @optional\n   */\n  theme?: ThemeProp;\n};\n\n/**\n * A wrapper for views that should respond to touches.\n * Provides a material \"ink ripple\" interaction effect for supported platforms (>= Android Lollipop).\n * On unsupported platforms, it falls back to a highlight effect.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { Text, TouchableRipple } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <TouchableRipple\n *     onPress={() => console.log('Pressed')}\n *     rippleColor=\"rgba(0, 0, 0, .32)\"\n *   >\n *     <Text>Press anywhere</Text>\n *   </TouchableRipple>\n * );\n *\n * export default MyComponent;\n * ```\n *\n * @extends Pressable props https://reactnative.dev/docs/Pressable#props\n */\nconst TouchableRipple = ({\n  style,\n  background: _background,\n  borderless = false,\n  disabled: disabledProp,\n  rippleColor,\n  underlayColor: _underlayColor,\n  children,\n  theme: themeOverrides,\n  ...rest\n}: Props) => {\n  const theme = useInternalTheme(themeOverrides);\n  const { calculatedRippleColor } = getTouchableRippleColors({\n    theme,\n    rippleColor,\n  });\n  const hoverColor = color(calculatedRippleColor).fade(0.5).rgb().string();\n  const { rippleEffectEnabled } = React.useContext<Settings>(SettingsContext);\n\n  const { onPress, onLongPress, onPressIn, onPressOut } = rest;\n\n  const handlePressIn = React.useCallback(\n    (e: any) => {\n      onPressIn?.(e);\n\n      if (rippleEffectEnabled) {\n        const { centered } = rest;\n\n        const button = e.currentTarget;\n        const style = window.getComputedStyle(button);\n        const dimensions = button.getBoundingClientRect();\n\n        let touchX;\n        let touchY;\n\n        const { changedTouches, touches } = e.nativeEvent;\n        const touch = touches?.[0] ?? changedTouches?.[0];\n\n        // If centered or it was pressed using keyboard - enter or space\n        if (centered || !touch) {\n          touchX = dimensions.width / 2;\n          touchY = dimensions.height / 2;\n        } else {\n          touchX = touch.locationX ?? e.pageX;\n          touchY = touch.locationY ?? e.pageY;\n        }\n\n        // Get the size of the button to determine how big the ripple should be\n        const size = centered\n          ? // If ripple is always centered, we don't need to make it too big\n            Math.min(dimensions.width, dimensions.height) * 1.25\n          : // Otherwise make it twice as big so clicking on one end spreads ripple to other\n            Math.max(dimensions.width, dimensions.height) * 2;\n\n        // Create a container for our ripple effect so we don't need to change the parent's style\n        const container = document.createElement('span');\n\n        container.setAttribute('data-paper-ripple', '');\n\n        Object.assign(container.style, {\n          position: 'absolute',\n          pointerEvents: 'none',\n          top: '0',\n          left: '0',\n          right: '0',\n          bottom: '0',\n          borderTopLeftRadius: style.borderTopLeftRadius,\n          borderTopRightRadius: style.borderTopRightRadius,\n          borderBottomRightRadius: style.borderBottomRightRadius,\n          borderBottomLeftRadius: style.borderBottomLeftRadius,\n          overflow: centered ? 'visible' : 'hidden',\n        });\n\n        // Create span to show the ripple effect\n        const ripple = document.createElement('span');\n\n        Object.assign(ripple.style, {\n          position: 'absolute',\n          pointerEvents: 'none',\n          backgroundColor: calculatedRippleColor,\n          borderRadius: '50%',\n\n          /* Transition configuration */\n          transitionProperty: 'transform opacity',\n          transitionDuration: `${Math.min(size * 1.5, 350)}ms`,\n          transitionTimingFunction: 'linear',\n          transformOrigin: 'center',\n\n          /* We'll animate these properties */\n          transform: 'translate3d(-50%, -50%, 0) scale3d(0.1, 0.1, 0.1)',\n          opacity: '0.5',\n\n          // Position the ripple where cursor was\n          left: `${touchX}px`,\n          top: `${touchY}px`,\n          width: `${size}px`,\n          height: `${size}px`,\n        });\n\n        // Finally, append it to DOM\n        container.appendChild(ripple);\n        button.appendChild(container);\n\n        // rAF runs in the same frame as the event handler\n        // Use double rAF to ensure the transition class is added in next frame\n        // This will make sure that the transition animation is triggered\n        requestAnimationFrame(() => {\n          requestAnimationFrame(() => {\n            Object.assign(ripple.style, {\n              transform: 'translate3d(-50%, -50%, 0) scale3d(1, 1, 1)',\n              opacity: '1',\n            });\n          });\n        });\n      }\n    },\n    [onPressIn, rest, rippleEffectEnabled, calculatedRippleColor]\n  );\n\n  const handlePressOut = React.useCallback(\n    (e: any) => {\n      onPressOut?.(e);\n\n      if (rippleEffectEnabled) {\n        const containers = e.currentTarget.querySelectorAll(\n          '[data-paper-ripple]'\n        ) as HTMLElement[];\n\n        requestAnimationFrame(() => {\n          requestAnimationFrame(() => {\n            containers.forEach((container) => {\n              const ripple = container.firstChild as HTMLSpanElement;\n\n              Object.assign(ripple.style, {\n                transitionDuration: '250ms',\n                opacity: 0,\n              });\n\n              // Finally remove the span after the transition\n              setTimeout(() => {\n                const { parentNode } = container;\n\n                if (parentNode) {\n                  parentNode.removeChild(container);\n                }\n              }, 500);\n            });\n          });\n        });\n      }\n    },\n    [onPressOut, rippleEffectEnabled]\n  );\n\n  const hasPassedTouchHandler = hasTouchHandler({\n    onPress,\n    onLongPress,\n    onPressIn,\n    onPressOut,\n  });\n\n  const disabled = disabledProp || !hasPassedTouchHandler;\n\n  return (\n    <Pressable\n      {...rest}\n      onPressIn={handlePressIn}\n      onPressOut={handlePressOut}\n      disabled={disabled}\n      style={(state) => [\n        styles.touchable,\n        borderless && styles.borderless,\n        // focused state is not ready yet: https://github.com/necolas/react-native-web/issues/1849\n        // state.focused && { backgroundColor: ___ },\n        state.hovered && { backgroundColor: hoverColor },\n        typeof style === 'function' ? style(state) : style,\n      ]}\n    >\n      {(state) =>\n        React.Children.only(\n          typeof children === 'function' ? children(state) : children\n        )\n      }\n    </Pressable>\n  );\n};\n\n/**\n * Whether ripple effect is supported.\n */\nTouchableRipple.supported = true;\n\nconst styles = StyleSheet.create({\n  touchable: {\n    position: 'relative',\n    ...(Platform.OS === 'web' && {\n      cursor: 'pointer',\n      transition: '150ms background-color',\n    }),\n  },\n  borderless: {\n    overflow: 'hidden',\n  },\n});\n\nexport default TouchableRipple;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}