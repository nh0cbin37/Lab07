{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _construct2 = _interopRequireDefault(require(\"@babel/runtime/helpers/construct\"));\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\nvar _common = require(\"@react-native-firebase/app/lib/common\");\nvar _FirestoreDocumentReference = _interopRequireWildcard(require(\"./FirestoreDocumentReference\"));\nvar _FirestoreFieldPath = _interopRequireWildcard(require(\"./FirestoreFieldPath\"));\nvar _FirestorePath = _interopRequireDefault(require(\"./FirestorePath\"));\nvar _FirestoreSnapshotMetadata = _interopRequireDefault(require(\"./FirestoreSnapshotMetadata\"));\nvar _utils = require(\"./utils\");\nvar _serialize = require(\"./utils/serialize\");\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\nvar FirestoreDocumentSnapshot = exports.default = function () {\n  function FirestoreDocumentSnapshot(firestore, nativeData) {\n    (0, _classCallCheck2.default)(this, FirestoreDocumentSnapshot);\n    this._data = (0, _serialize.parseNativeMap)(firestore, nativeData.data);\n    this._metadata = new _FirestoreSnapshotMetadata.default(nativeData.metadata);\n    this._ref = new _FirestoreDocumentReference.default(firestore, _FirestorePath.default.fromName(nativeData.path));\n    this._exists = nativeData.exists;\n  }\n  (0, _createClass2.default)(FirestoreDocumentSnapshot, [{\n    key: \"exists\",\n    get: function get() {\n      return this._exists;\n    }\n  }, {\n    key: \"id\",\n    get: function get() {\n      return this._ref.id;\n    }\n  }, {\n    key: \"metadata\",\n    get: function get() {\n      return this._metadata;\n    }\n  }, {\n    key: \"ref\",\n    get: function get() {\n      return this._ref;\n    }\n  }, {\n    key: \"data\",\n    value: function data() {\n      return this._data;\n    }\n  }, {\n    key: \"get\",\n    value: function get(fieldPath) {\n      if (!(0, _common.isString)(fieldPath) && !(fieldPath instanceof _FirestoreFieldPath.default) && !Array.isArray(fieldPath)) {\n        throw new Error(\"firebase.firestore() DocumentSnapshot.get(*) 'fieldPath' expected type string, array or FieldPath.\");\n      }\n      var path;\n      if ((0, _common.isString)(fieldPath)) {\n        try {\n          path = (0, _FirestoreFieldPath.fromDotSeparatedString)(fieldPath);\n        } catch (e) {\n          throw new Error(`firebase.firestore() DocumentSnapshot.get(*) 'fieldPath' ${e.message}.`);\n        }\n      } else if ((0, _common.isArray)(fieldPath)) {\n        path = (0, _construct2.default)(_FirestoreFieldPath.default, (0, _toConsumableArray2.default)(fieldPath));\n      } else {\n        path = fieldPath;\n      }\n      return (0, _utils.extractFieldPathData)(this._data, path._segments);\n    }\n  }, {\n    key: \"isEqual\",\n    value: function isEqual(other) {\n      if (!(other instanceof FirestoreDocumentSnapshot)) {\n        throw new Error(\"firebase.firestore() DocumentSnapshot.isEqual(*) 'other' expected a DocumentSnapshot instance.\");\n      }\n      if (this.exists !== other.exists || !this.metadata.isEqual(other.metadata) || !this.ref.isEqual(other.ref)) {\n        return false;\n      }\n      var thisData = JSON.stringify(this.data());\n      var otherData = JSON.stringify(other.data());\n      return thisData === otherData;\n    }\n  }]);\n  return FirestoreDocumentSnapshot;\n}();\n(0, _FirestoreDocumentReference.provideDocumentSnapshotClass)(FirestoreDocumentSnapshot);","map":{"version":3,"names":["_common","require","_FirestoreDocumentReference","_interopRequireWildcard","_FirestoreFieldPath","_FirestorePath","_interopRequireDefault","_FirestoreSnapshotMetadata","_utils","_serialize","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","obj","__esModule","default","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","FirestoreDocumentSnapshot","exports","firestore","nativeData","_classCallCheck2","_data","parseNativeMap","data","_metadata","FirestoreSnapshotMetadata","metadata","_ref","FirestoreDocumentReference","FirestorePath","fromName","path","_exists","exists","_createClass2","id","value","fieldPath","isString","FirestoreFieldPath","Array","isArray","Error","fromDotSeparatedString","e","message","_construct2","_toConsumableArray2","extractFieldPathData","_segments","isEqual","other","ref","thisData","JSON","stringify","otherData","provideDocumentSnapshotClass"],"sources":["C:/ReactNative/DemoFireBase/node_modules/@react-native-firebase/firestore/lib/FirestoreDocumentSnapshot.js"],"sourcesContent":["/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport { isArray, isString } from '@react-native-firebase/app/lib/common';\nimport FirestoreDocumentReference, {\n  provideDocumentSnapshotClass,\n} from './FirestoreDocumentReference';\nimport FirestoreFieldPath, { fromDotSeparatedString } from './FirestoreFieldPath';\nimport FirestorePath from './FirestorePath';\nimport FirestoreSnapshotMetadata from './FirestoreSnapshotMetadata';\nimport { extractFieldPathData } from './utils';\nimport { parseNativeMap } from './utils/serialize';\n\nexport default class FirestoreDocumentSnapshot {\n  constructor(firestore, nativeData) {\n    this._data = parseNativeMap(firestore, nativeData.data);\n    this._metadata = new FirestoreSnapshotMetadata(nativeData.metadata);\n    this._ref = new FirestoreDocumentReference(firestore, FirestorePath.fromName(nativeData.path));\n    this._exists = nativeData.exists;\n  }\n\n  get exists() {\n    return this._exists;\n  }\n\n  get id() {\n    return this._ref.id;\n  }\n\n  get metadata() {\n    return this._metadata;\n  }\n\n  get ref() {\n    return this._ref;\n  }\n\n  data() {\n    // TODO: ehesp: Figure out how to handle this.\n    // const snapshotOptions = {};\n    //\n    // if (!isUndefined(options)) {\n    //   if (!isObject(options)) {\n    //     throw new Error(\n    //       `firebase.firestore() DocumentSnapshot.data(*) 'options' expected an object if defined.`,\n    //     );\n    //   }\n    //\n    //   if (\n    //     options.serverTimestamps &&\n    //     options.serverTimestamps !== 'estimate' &&\n    //     options.serverTimestamps !== 'previous' &&\n    //     options.serverTimestamps !== 'none'\n    //   ) {\n    //     throw new Error(\n    //       `firebase.firestore() DocumentSnapshot.data(*) 'options.serverTimestamps' expected one of 'estimate', 'previous' or 'none'.`,\n    //     );\n    //   }\n    // }\n\n    return this._data;\n  }\n\n  get(fieldPath) {\n    // TODO: ehesp: How are SnapshotOptions handled?\n\n    if (\n      !isString(fieldPath) &&\n      !(fieldPath instanceof FirestoreFieldPath) &&\n      !Array.isArray(fieldPath)\n    ) {\n      throw new Error(\n        \"firebase.firestore() DocumentSnapshot.get(*) 'fieldPath' expected type string, array or FieldPath.\",\n      );\n    }\n\n    let path;\n\n    if (isString(fieldPath)) {\n      try {\n        path = fromDotSeparatedString(fieldPath);\n      } catch (e) {\n        throw new Error(`firebase.firestore() DocumentSnapshot.get(*) 'fieldPath' ${e.message}.`);\n      }\n    } else if (isArray(fieldPath)) {\n      path = new FirestoreFieldPath(...fieldPath);\n    } else {\n      // Is already field path\n      path = fieldPath;\n    }\n\n    return extractFieldPathData(this._data, path._segments);\n  }\n\n  isEqual(other) {\n    if (!(other instanceof FirestoreDocumentSnapshot)) {\n      throw new Error(\n        \"firebase.firestore() DocumentSnapshot.isEqual(*) 'other' expected a DocumentSnapshot instance.\",\n      );\n    }\n\n    if (\n      this.exists !== other.exists ||\n      !this.metadata.isEqual(other.metadata) ||\n      !this.ref.isEqual(other.ref)\n    ) {\n      return false;\n    }\n\n    const thisData = JSON.stringify(this.data());\n    const otherData = JSON.stringify(other.data());\n\n    return thisData === otherData;\n  }\n}\n\n// To avoid React Native require cycle\nprovideDocumentSnapshotClass(FirestoreDocumentSnapshot);\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}